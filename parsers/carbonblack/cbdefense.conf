# Licensed to empow under one or more contributor
# license agreements. See the NOTICE file distributed with
# this work for additional information regarding copyright
# ownership. empow licenses this file to you under
# the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.



input{
  pipeline{
    address => cbdefense_pipeline
  }
}

filter {
  csv {
    separator => "|"
    quote_char => "|"
    columns => [
      "column1", 
      "column2", 
      "column3", 		 
      "column4", 
      "productVersion",    #col 5 - ready
      "[event][category]", #col 6 - ready
      "[event][description]", #col 7 - additional processing is made below
      "[event][severity]",   #col 8 - additional processing is made below
      "metadata"]         #col 9 - remaining key-value fields...
  }

  mutate {
    convert => {"[event][norm_risk_level]" => "integer"}
  }	
	
  kv {
    whitespace => strict
    source => "metadata"
  }

  grok{
    match => {"message" => "cs%{NUMBER:cs_id}Label=\"Threat_ID\""}
  } 
  grok{
    match => {"message" => "cs%{NUMBER:cs_info}Label=\"Link\""}
  } 


  mutate {
    replace => {"[destination][hostname]" => "%{dvchost},%{sntdom}"}
    replace => {"[destination][user][name]" => "%{duser},%{sntdom}"}
    rename => ["dvc", "[destination][ip]"]
    rename => ["cs%{cs_id}", "[event][id]"]
    rename => ["cs%{cs_info}", "[event][more][info]"]
    rename => ["act", "[event][type]"]
  }




  if ([duser] =~ /@/) or ([sntdom] =~ /^\s*$/) {
    mutate {
      rename => ["duser", "[destination][user][name]"]
    }
  } else {
    mutate {
      add_field => { "[destination][user][name]" => "%{duser}@%{sntdom}" }
    }
  } 

  if ([dvchost] =~ /@/) or ([sntdom] =~ /^\s*$/) {
    mutate {
      rename => ["dvchost", "[destination][hostname]"]
    }
  } else {
    mutate {
      add_field => { "[destination][hostname]" => "%{dvchost}@%{sntdom}" }
    }
  }  
    
  #-- eventUTCTime starts
  date {
    # Feb 06 2019, 10:32:49
    match => [ "rt", "UNIX", "MMM dd yyyy HH:mm:ss" ]
    timezone => "UTC"
    target => "@timestamp"
  }

  #-- description treatment starts here: decide which service type it belongs to using the description field
  grok {
    tag_on_failure => ["isCustomService"]
      match => {
        "[event][description]" => "(A known virus \((?<malwareName>(\w+\.?)+))"
      }
    }

  if "isCustomService" in [tags] {
    mutate {
      add_field => {"[observer][type]" => "Custom Service"}
    }
    
    if [event][description] =~ /Multiple commands were executed via a script/ {
      mutate { 
        add_field => { "[threat][technique]" => "Generic Code Execution Detection" }
        add_field => { "[threat][tactic]" => "Lateral Movement" }
      }
    } else if [event][description] =~ /invoked another application|acted as a network server/ {
      mutate { add_tag => [ "Going to forensics only"] }
    } else {
      #[event][description] =~ /A known virus was detected running|An application has created an executable|An unknown, suspect or compromised application/ {
      mutate {
        add_field => { "[threat][technique]" => "Custom External Delivery"}
        add_field => { "[threat][tactic]" => "External Delivery"}
      }
    } 
  }		
  else {
    mutate {
      add_field => {"[observer][type]" => "Anti Virus" "[event][action]" => "File Download"}
      rename => ["malwareName", "[threat][name]"]
      add_tag => [ "empow_classification"]
    }
    mutate {
      add_field => {"[empow][malware_name]" => "%{[threat][name]}"}
    }
  }

  #-- description treatment ends here
  mutate {
    add_field => {
      "[observer][vendor]" => "Carbon Black"
      "[observer][product]" => "Cb Defense" 
    }
  }


  #-- remove redundant tags	
  mutate {
    remove_tag => ["isCustomService"]
  }
  #-- cleanup end
}



output {  
  pipeline{
    send_to => [empow_classifier_output]
  }
}
